from sqlalchemy import create_engine, Column, String, Integer, DateTime, Float
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ config
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from config import Config

Base = declarative_base()
engine = create_engine(Config.DATABASE_URL)
Session = sessionmaker(bind=engine)
session = Session()


class ScanReport(Base):
    __tablename__ = 'scan_reports'
    id = Column(Integer, primary_key=True, autoincrement=True)
    host = Column(String, nullable=False)
    port = Column(Integer, nullable=False)
    timestamp = Column(DateTime, nullable=False)
    scan_duration = Column(Float, nullable=True)
    total_ports = Column(Integer, nullable=True)
    timeout = Column(Float, nullable=True)
    scan_delay = Column(Float, nullable=True)


def create_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü"""
    try:
        Base.metadata.create_all(engine)
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞/–ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise


def save_report(report):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        for port in report["open_ports"]:
            new_entry = ScanReport(
                host=report["host"], 
                port=port, 
                timestamp=report["timestamp"],
                scan_duration=report.get("scan_duration"),
                total_ports=report.get("total_ports"),
                timeout=report.get("settings", {}).get("timeout"),
                scan_delay=report.get("settings", {}).get("scan_delay")
            )
            session.add(new_entry)
        
        session.commit()
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(report['open_ports'])} –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        
    except Exception as e:
        session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise


def get_reports_by_host(host: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —Ö–æ—Å—Ç—É"""
    try:
        reports = session.query(ScanReport).filter(ScanReport.host == host).all()
        return reports
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤: {e}")
        return []


def get_all_reports():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–æ–≤"""
    try:
        reports = session.query(ScanReport).all()
        return reports
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤: {e}")
        return []


def clear_reports():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–æ–≤"""
    try:
        session.query(ScanReport).delete()
        session.commit()
        print("üóëÔ∏è –í—Å–µ –æ—Ç—á–µ—Ç—ã —É–¥–∞–ª–µ–Ω—ã")
    except Exception as e:
        session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤: {e}")
        raise

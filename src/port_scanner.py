import logging
import os
import socket
import sys
import time
from dataclasses import dataclass
from datetime import datetime
from typing import Any, Dict, List

from tqdm import tqdm

from config import Config

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ config
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


@dataclass
class PortScanner:
    host: str
    ports: List[int] = None
    timeout: float = None
    scan_delay: float = None
    max_retries: int = None
    show_progress: bool = None
    show_details: bool = None

    def __post_init__(self):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.ports = self.ports or Config.DEFAULT_PORTS
        self.timeout = self.timeout or Config.DEFAULT_TIMEOUT
        self.scan_delay = self.scan_delay or Config.SCAN_DELAY
        self.max_retries = self.max_retries or Config.MAX_RETRIES
        self.show_progress = (
            self.show_progress
            if self.show_progress is not None
            else Config.SHOW_PROGRESS
        )
        self.show_details = (
            self.show_details if self.show_details is not None else Config.SHOW_DETAILS
        )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            filename=Config.LOG_FILE,
            level=getattr(logging, Config.LOG_LEVEL),
            format="%(asctime)s - %(levelname)s - %(message)s",
        )

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self._validate_inputs()

    def _validate_inputs(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        if not self.host:
            raise ValueError("–•–æ—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

        if not self.ports:
            raise ValueError("–°–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

        if self.timeout <= 0:
            raise ValueError("–¢–∞–π–º–∞—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")

        if self.scan_delay < 0:
            raise ValueError("–ó–∞–¥–µ—Ä–∂–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")

    def _is_port_open(self, port: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–∫—Ä—ã—Ç –ª–∏ –ø–æ—Ä—Ç"""
        for attempt in range(self.max_retries):
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.settimeout(self.timeout)

            try:
                s.connect((self.host, port))
                return True
            except socket.error as e:
                if attempt == self.max_retries - 1:
                    logging.debug(
                        f"–ü–æ—Ä—Ç {port} –∑–∞–∫—Ä—ã—Ç –ø–æ—Å–ª–µ {self.max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}"
                    )
                continue
            finally:
                s.close()

        return False

    def scan_ports(self) -> Dict[str, Any]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤"""
        print(f"–ù–∞—á–∏–Ω–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {self.host}")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ç–æ–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {len(self.ports)}")
        print(f"–¢–∞–π–º–∞—É—Ç: {self.timeout}—Å, –ó–∞–¥–µ—Ä–∂–∫–∞: {self.scan_delay}—Å")
        print("-" * 50)
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("-" * 50)

        open_ports = []
        start_time = time.time()
        scanned_ports = 0

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        if self.show_progress:
            port_iterator = tqdm(self.ports, desc="–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤")
        else:
            port_iterator = self.ports

        try:
            for port in port_iterator:
                if self.show_details:
                    print(f"–°–∫–∞–Ω–∏—Ä—É—é –ø–æ—Ä—Ç: {port}")

                if self._is_port_open(port):
                    message = f"{self.host}: {port} –ø–æ—Ä—Ç –∞–∫—Ç–∏–≤–µ–Ω"
                    open_ports.append(port)
                    print(f"‚úÖ {message}")
                    logging.info(message)

                scanned_ports += 1

                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                if self.scan_delay > 0:
                    time.sleep(self.scan_delay)

        except KeyboardInterrupt:
            print("\n\n‚èπÔ∏è  –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
            print(f"üìä –ü—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Ä—Ç–æ–≤: {scanned_ports}/{len(self.ports)}")
            logging.info(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞ –ø–æ—Ä—Ç—É {port}")

        end_time = time.time()
        scan_duration = end_time - start_time

        print("-" * 50)
        print(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {scan_duration:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"–ü—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Ä—Ç–æ–≤: {scanned_ports}/{len(self.ports)}")
        print(f"–ù–∞–π–¥–µ–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤: {len(open_ports)}")

        if open_ports:
            print("–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã:")
            for port in sorted(open_ports):
                print(f"  ‚Ä¢ {port}")

        return {
            "host": self.host,
            "open_ports": open_ports,
            "total_ports": len(self.ports),
            "scanned_ports": scanned_ports,
            "scan_duration": scan_duration,
            "timestamp": datetime.now(),
            "interrupted": scanned_ports < len(self.ports),
            "settings": {
                "timeout": self.timeout,
                "scan_delay": self.scan_delay,
                "max_retries": self.max_retries,
            },
        }

    def scan_common_ports(self) -> Dict[str, Any]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤"""
        self.ports = Config.get_common_ports()
        return self.scan_ports()

    def scan_port_range(self, start: int, end: int) -> Dict[str, Any]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–æ—Ä—Ç–æ–≤"""
        self.ports = Config.get_ports_from_custom_range(start, end)
        return self.scan_ports()

    def scan_well_known_ports(self) -> Dict[str, Any]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–æ—Ä–æ—à–æ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤ (1-1024)"""
        self.ports = Config.get_ports_from_range("well_known")
        return self.scan_ports()
